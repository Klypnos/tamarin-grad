theory OTP
begin

builtins: symmetric-encryption, hashing


/* Registration */

//functions: enc/2, dec/2
//equations: dec(enc(m, k), k) = m

rule Register_SK:
    [ Fr(~SK) ]
    -->
    [ !Shared_Key($U, $S, ~SK) ]

rule Reveal_SK:
    [ !Shared_Key(U, S, SK) ]
    --[ SK_Reveal(U, S)]->
    [ Out(SK)]

rule User_Reg_1: // Does it matter where I generate a fresh key? Here I dont use PW in this step,
    [   Fr(~ID), // but PW is normally already generated at this step.
        Fr(~PW),
        !Shared_Key(U, S, SK)
    ]
    -->
    [   User_Reg_1(~ID, ~PW),
        Out( senc(~ID, SK) )
    ]

rule Server_Reg_1:
    let
        IDr = sdec(enc, SK)
    in
    [   In( enc ),
        Fr(~R0),
        Fr(~Rm1),
        Fr(~F0),
        !Shared_Key(U, S, SK),
        User_Reg_1(ID, PW)
    ]
    --[ Eq( IDr, ID) ]->
    [
        Server_Reg_1(IDr, ~R0, ~Rm1, ~F0),
        Out( senc(<~R0, ~Rm1, ~F0>, SK) )
    ]

rule User_Reg_2:
    let
        A1 = h(<ID,PW,F0>)
        F1 = h(A1)
        Q1 = h(<PW,Rm1>)
        A2 = h(<ID,Q1,F1>)
        F2 = h(A2)
        Q2 = h(<Q1,R0>)
        V1 = h(<A1,F2>)
        check = <F1,V1>
    in
    [   In( enc),
        !Shared_Key(U, S, SK),
        User_Reg_1(ID, PW),
        Server_Reg_1(IDr, R0, Rm1, F0)

    ]
    --[ Eq( sdec(enc, SK), <R0, Rm1, F0> ) ]->
    [
        User_Reg_2(ID,Q2,A1,F1,A2,F2),
        Out( senc(<F1,V1>, SK) ),
        User_Reg_2_Check(check)
    ]

rule Server_Reg_2:
    [   In( enc),
        User_Reg_2_Check(check),
        !Shared_Key(U, S, SK),
        Server_Reg_1(IDr, R0, Rm1, F0)
    ]
    --[
        Eq( sdec( enc, SK), check ),
        Registration(U, S, SK, IDr)
      ]->
    [
        Server_Reg_2( IDr, fst(sdec( enc, SK)), snd(sdec( enc, SK)) )
    ]

axiom Equality_Checks_Succeed: "All x y #i. Eq(x,y) @ i ==> x = y "

lemma Registration_Possible:
    exists-trace
    "
    (All x y #i. Eq(x,y) @i ==> x = y)
    &
    ( Ex U S ID SK #j. Registration(U, S, SK, ID) @ #j
        &  not( Ex #r. SK_Reveal(U, S) @r ) )
    "
end
