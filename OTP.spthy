theory OTP
begin

builtins: symmetric-encryption, hashing


/* Registration */

//functions: xor/2

//equations: dec(enc(m, k), k) = m
//equations: xor( (xor(a,b) , xor(a,c) ) = a

rule Register_PW:
	[ Fr(~PW)]
	-->
	[ Pass($U, ~PW)]

rule Reveal_PW:
	[ Pass($U, ~PW)]
	--[ PW_Reveal($U)]->
	[ Out(~PW)]

rule Register_US:
	[ ]
	-->
	[ !Credentials($U, $S) ]


/* REGISTRATION PHASE START */
/* REGISTRATION PHASE START */
rule User_Reg_1: // Does it matter where I generate a fresh key? Here I dont use PW in this step,
	[   Fr(~ID), // but PW is normally already generated at this step.
		Pass( $U, ~PW)
	]
	-->
	[   User_Reg_1(~ID, ~PW),
		User_Reg_1_S(~ID)
	]

rule Server_Reg_1:
	[  	Fr(~R0),
		Fr(~Rm1),
		Fr(~F0),
		User_Reg_1_S(ID)
	]
	-->
	[
		Server_Reg_1(ID, ~R0, ~Rm1, ~F0),
		Server_Reg_1_U(~R0, ~Rm1, ~F0)
	]
//    Registration Phase:
 //   1. U => S : ID.
  //  2. S => U : R0, R-1, F0.
   // 3. U => S : F1, V1.
rule User_Reg_2:
	let
		A1 = h(<ID,PW,F0>)
		F1 = h(A1)
		Q1 = h(<PW,Rm1>)
		A2 = h(<ID,Q1,F1>)
		F2 = h(A2)
		Q2 = h(<Q1,R0>)
		V1 = h(<A1,F2>)
	in
	[
		User_Reg_1(ID, PW),
		Server_Reg_1_U(R0, Rm1, F0)
	]
	-->
	[
		User_Reg_2(ID,Q2,A1,F1,A2,F2),
		User_Reg_2_FQ(F1,Q2),
		User_Reg_2_S(F1,V1)
	]

rule Server_Reg_2:
	[ 	User_Reg_2_S(F1,V1),
		Server_Reg_1(ID, R0, Rm1, F0)
	]
	--[
		Registration(ID)
	  ]->
	[
		Server_Reg_2(ID,F1,V1)
	]

/* REGISTRATION PHASE END */

/* AUTHENTICATION PHASE START */

rule User_Auth_1:
	let
		A3  = h(<ID,Q2,F2>)
		F3  = h(A3)
		Fc  =  senc(F2,F1) // xor workaround
		AFc =  senc(A1,F2) //xor workaround
		V2  = h(<A2,F3>)
		FVc = h(<F1,V2>)
	in
	[
		User_Reg_2(ID, Q2, A1, F1, A2, F2)
	]
	-->
	[
		User_Auth_1(A3,F3),
		Out(<Fc, AFc, V2, FVc>)
	]

rule Server_Auth_1:
	let
		calc_F2 = sdec(FcR, F1)
		calc_A1 = sdec(AFcR, calc_F2)
		calc_F1 = h(calc_A1)
		calc_V1 = h(<calc_A1,calc_F2>)
		calc_FVc = h(<F1, V2R>)
	in
	[   Fr(~R1),
		In(<FcR, AFcR, V2R, FVcR>),
		Server_Reg_2(ID, F1, V1),
		!Credentials(U, S)
		//seperate this maybe
	]
	--[
	//	Answer_Req(U, S, )
		Eq( F1, calc_F1),
		//S IS CONVINCED THAT F1 F2 A1 ARE NOT MODIFIED IF ABOVE EQ CHECKS SUCCEED
		Eq( V1, calc_V1),
		// S AUTHENTICATES U
		!S_Authenticates_U(S,U, calc_V1, calc_A1, calc_F2),
		Eq( FVcR, calc_FVc )
	]->
	[
		Server_Auth_1(calc_F2,V2R),
		Out( <~R1,h(<~R1,F1>)> )
	]

rule User_Auth_2:
	let
		calc_hRF = h(<R1, F1>)
		Q3 = h(<Q2, R1>)
	in
	[
		In(<R1, hRF>),
		User_Auth_1(A3,F3),
		!Credentials(U, S),
		User_Reg_2_FQ(F1,Q2)
	]
	--[ Eq( hRF, calc_hRF ),
		!U_Authenticates_S(U, S, R1, F1, hRF)]->
	[
		User_Auth_2(Q3, A3, F3)
	]

/* AUTHENTICATION PHASE END */
axiom Equality_Checks_Succeed: "All x y #i. Eq(x,y) @ i ==> x = y "


lemma Authentication_Possible:
	exists-trace
	"
	(All x y #i. Eq(x,y) @i ==> x = y)
	&
	( Ex U S V1 A1 F2 #j. !S_Authenticates_U(S,U,V1,A1,F2) @j
		& Ex R1 F1 hRF #k. !U_Authenticates_S(U,S,R1,F1,hRF) @k )
	"

lemma Registration_Possible:
  exists-trace
  "Ex ID #i. Registration(ID) @i "




end
