theory CramMD5
begin


/*
Alice-Bob Notation:
 1. A -> S: A
 2. S -> A: Ns.T.S
 3. A -> S: F(SK.T)
 where
     Ns is a nonce generated by the server;
     T is a timestamp (currently abstracted with a nonce)
     SK is the shared key between A and S
     F is a cryptographic hash function (MD5 in practice, but this is
      unimportant for our purposes).  The use of F
      is intended to ensure that only a digest of the shared
      key is transmitted, with T assuring freshness of the
      generated hash value.
*/


functions: h/1

rule Register_SK:
    [ Fr(~SK) ]
    -->
    [ !Shared_Key($A,$S,~SK) ]
/*
rule Get_SK:
    [ !Shared_Key(A, S, SK)]
    -->
    [ Out(SK)]
*/
rule Reveal_SK:
    [ !Shared_Key(A, S, SK)]
    --[ SK_Reveal(A, S) ]->
    [ Out(SK) ]

// 1. A -> S: A
rule Client_1:
    []
    -->
    [ Client_1($A),
      Out($A) ]

rule Server_1:
    [ In(A),
      Fr(~T),
      Fr(~N)
    ]  // 2. S -> A: Ns.T.S
    --[ Server_1(A, $S, ~T ) ]-> //?
    [ Out( <~N, ~T, $S> ) ]


rule Client_2:
    [ In( < N, T, S > ),
      !Shared_Key(A, S, SK),
      Client_1(A)
    ]  //3. A -> S: F(SK.T)
    -->
    [
      Out( h( < SK,T> ) )
    ]

rule Server_2:
    [
      !Shared_Key(A, S, SK),
      In( hashed ),
      Server_1( A, S, T )
    ]
  --[
      Eq( hashed, h(SK,T) ),
      AnsweredRequest(S, SK),
      Session( h( <A, SK, T> ) )
    ]->
    []



axiom Equality_Checks_Succeed: "All x y #i. Eq(x,y) @ i ==> x = y "

// cant ged rid of free bound warning
// if i do i get another error
// whats the difference between @i vs. @ #i
lemma SK_secrecy:
    " /* It cannot be that a */
    not(
        Ex A SK T #i #j.
            Session( h( <A, SK, T> ) ) @ #i
        & K(SK) @ #j
        & not( Ex S #r.
            SK_Reveal(A, S) @r)
    )
    "

lemma Client_Authentication:
    "
    (  All A SK T #i. Session( h( <A, SK, T> ) ) @ #i
        ==>
        (
            ( Ex S #a. AnsweredRequest(S,SK) @ a )
            | ( Ex S #r. SK_Reveal(A, S) @ r & r < i )
        )
    )
    "


end
